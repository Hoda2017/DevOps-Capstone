# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.7

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
  # Inside the workflow, you define the jobs you want to run.
jobs: 
      Run-Lint:
          docker:
                - image: circleci/node:13.8.0
          steps:
                - checkout
                - run:
                    name: install dependencies
                    command: |            
                              make install
                - run:
                      name: run lint
                      command: |
                              make lint   

      Build-Push-docker:
                        docker:
                              # Use the same Docker base as the project
                        machine: true
                        working_directory: ~/app
                        steps:
                              - checkout
                              - run:
                                    name: Docker image build
                                    command: |
                                          docker login -u ${User} -p ${PWD}
                                          docker build -t hodayacoub/capstone:prod .
                                          docker run -p 8888:80 hodayacoub/capstone:prod
                                          sleep 10
                                          docker container ls
                                          docker push hodayacoub/capstone:prod   

      Configurate-kubernetes-infrastructure:     
            docker:
                - image: amazon/aws-cli:2.1.24   
            steps:
                - checkout 
                - run:
                        name: install eksctl 
                        command: |
                                  yum install -y tar gzip
                                  curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                                   mv /tmp/eksctl /usr/local/bin 
                - run:
                        name: install kubectl 
                        command: |
                              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                              chmod +x kubectl
                              mv kubectl  /usr/local/bin 
                - run:
                        name: create kubernetes cluster
                        command: |
                              if eksctl get cluster --name capstone-cluster
                              then
                              echo "cluster already exists"
                              aws eks --region us-east-1 update-kubeconfig --name capstone-cluster
                              else
                              echo "creating a new cluster"
                              eksctl create cluster --name capstone-cluster --region us-east-2  --zones us-east-1a,us-east-1b,us-east-1c --nodegroup-name linux-nodes --node-type t2.micro --nodes 2   
                              fi
                              kubectl get nodes  

                - run:
                        name: deploy app 
                        command: |
                              TAG=0.1.${CIRCLE_WORKFLOW_ID:0:7} 
                              if kubectl create deployment clusteredapp --image=hodayacoub/cluster-node:prod
                              then
                              echo "new deployment created"               
                              else
                              echo "deployment already exists!!"
                              POD_NAME=$(kubectl get pod -l app=clusteredapp -o jsonpath="{.items[0].metadata.name}")
                              CONTAINER_NAME=$(kubectl get pods $POD_NAME -o jsonpath='{.spec.containers[*].name}')
                              kubectl set image deployment/clusteredapp $CONTAINER_NAME=hodayacoub/cluster-node:prod
                              kubectl rollout status deployment/clusteredapp 
                              fi                                                                                                                            

workflows:
  default:
    jobs:
      - Run-Lint  
      - Build-Push-docker:
          requires: [Run-Lint]
      - Configurate-kubernetes-infrastructure:
          requires: [Build-Push-docker]  
      